import XMonad
import XMonad.Config.Desktop (desktopConfig)

import XMonad.Hooks.DynamicLog (xmobar, dynamicLogString, xmonadPropLog)

import XMonad.Prompt.Shell (shellPrompt)
import XMonad.Prompt.Ssh (sshPrompt)
import XMonad.Util.NamedScratchpad ( defaultFloating, namedScratchpadAction
                                   , namedScratchpadManageHook
                                   , customFloating
                                   , NamedScratchpad (NS) )

import XMonad.Hooks.DynamicLog (dzenWithFlags)
import XMonad.Hooks.ManageDocks (manageDocks, docks, avoidStruts) --, ToggleStruts(..))
import qualified XMonad.StackSet as W

import XMonad.Util.Run (spawnPipe)

import qualified Data.Map as M
import qualified Data.Char as C

main = do spawn "~/.xmonad/xmobar.sh ~/.xmonad/xmobar.hs"
          xmonad conf
  where

    conf = desktopConfig { borderWidth = 2
                         , focusedBorderColor = "#0000FF"
                         , terminal = "urxvt"
                         , modMask = mod4Mask
                         , keys = myKeys <+> keys desktopConfig
                         , manageHook = scratchpadHook <+> manageHook desktopConfig <+> myManageHook
                         , startupHook = spawn "xset r rate 250 50; feh --bg-scale ~/wallpaper/Glass-rain-minimalist-wallpaper-violet1-inverted.png"
                         , logHook = dynamicLogString def >>= xmonadPropLog
                         }
    scratchpads = let
        makeNS (name,cmd,px,py,w,h) = NS name (terminalCmd++cmd) (title =? name) (customFloating $ W.RationalRect px py w h)
        terminalCmd = "urxvt -fn \"xft:Bitstream Vera Sans Mono:pixelsize=11\" -rv -e "
      in
      map makeNS [
        ( "alsamixer",        "alsamixer",           3/8,  3/8, 1/4,  1/4 ),
        ( "htop",             "htop",                0,    1/6, 1,    2/3 ),
        ( "vimpc",            "vimpc",               1/2,  1/6, 5/12, 2/3 ),
        ( "ranger",           "ranger",              1/6,  1/6, 2/3,  2/3 ),
        ( "nix-env",          "nix-env -qaPA nixos", 2/3,  2/3, 1/3,  1/3 ) ] ++
       [ NS "telegram-desktop" "telegram-desktop" (className =? "TelegramDesktop")  (customFloating $ W.RationalRect (1/8) (1/8) (3/4) (3/4) )
--       , NS "emacseditor"      "emacseditor"      (className =? "Emacs") (customFloating $ W.RationalRect (1/12) (1/12) (5/6) (5/6) )
       ]
    myKeys XConfig { modMask = modm } =
      M.fromList [ ((modm, xK_p), shellPrompt def)
                 , ((modm .|. controlMask, xK_i), spawn "xcalib -i -a; xrandr --auto")
                 , ((modm .|. controlMask, xK_F12), spawn "xrandr --output LVDS1 --off --output VGA1 --auto")
                 , ((modm .|. controlMask, xK_s), sshPrompt def)
                 , ((modm .|. controlMask, xK_h), namedScratchpadAction scratchpads "htop")
                 , ((modm .|. controlMask, xK_m), namedScratchpadAction scratchpads "vimpc")
                 , ((modm .|. controlMask, xK_space), namedScratchpadAction scratchpads "ranger")
                 , ((modm .|. controlMask, xK_n), namedScratchpadAction scratchpads "nix-env")
                 , ((modm .|. controlMask, xK_v), namedScratchpadAction scratchpads "alsamixer")
                 , ((modm .|. controlMask, xK_g), namedScratchpadAction scratchpads "telegram-desktop")
--                 , ((modm .|. controlMask, xK_j), namedScratchpadAction scratchpads "emacseditor")
                 ]

    scratchpadHook = namedScratchpadManageHook scratchpads

    myManageHook = composeAll . concat $
      [ [ className   =? c --> doFloat           | c <- myFloatsByClass ]
      , [ title       =? t --> doFloat           | t <- myFloatsByTitle ]
     -- , [ className   =? c --> doF (W.shift "2") | c <- webApps ]
      ]
      where myFloatsByClass = concatMap (\s -> [ s, capitalize s ]) []
            myFloatsByTitle = [ "Open Document", "Open Files" ]
            webApps         = [ "" ]

    capitalize :: String -> String
    capitalize (c:cs) = C.toUpper c : cs
    capitalize [] = []
