set -eo pipefail

use_nix() {
  local wd=$PWD/.direnv/nix
  
  local shellfile=shell.nix
  local drvfile=$wd/shell.drv
  local outfile=$wd/result
  
  # same heuristic as nix-shell
  if [[ ! -f $shellfile ]]; then
    shellfile=default.nix
  fi
  
  if [[ ! -f $shellfile ]]; then
    fail "use nix_shell: shell.nix or default.nix not found in the folder"
  fi
  
  if [[ -f $drvfile && $(stat -c %Y "$shellfile") -gt $(stat -c %Y "$drvfile") ]]; then
    log_status "use nix_shell: removing stale drv"
    rm "$drvfile"
  fi
  
  if [[ ! -f $drvfile ]]; then
    mkdir -p "$wd"
    # instanciate the drv like it was in a nix-shell
    rm $wd/dep*
    IN_NIX_SHELL=1 nix-instantiate \
                     --show-trace \
                     --add-root "$drvfile" --indirect \
                     "$shellfile" >/dev/null
    nix-store -r $(nix-store --query --references "$drvfile") --add-root "$wd/dep" --indirect > /dev/null
  fi
  
  local dumpfile="$wd/dump-$(sha1sum .envrc|cut -d ' ' -f 1)-$(sha1sum $drvfile|cut -d ' ' -f 1)"
  
  if [[ ! -f $dumpfile ]]; then
    log_status "updateing nix-shell cache"
    rm -f "$(find $wd -name 'dump-*')"
    nix-shell --pure "$drvfile" --show-trace --run "$(join_args "$direnv" dump)" > "$dumpfile"
  fi
  
  path_backup="$PATH"
  direnv_load cat "$dumpfile" > /dev/null
  export PATH="$PATH:$path_backup"
  
  watch_file "$shellfile"
}